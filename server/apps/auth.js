import { Router } from "express";
import bcrypt from "bcrypt";
import { db } from "../utils/db.js";
import jwt from "jsonwebtoken";

const authRouter = Router();

// üê® Todo: Exercise #1
// ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ Register ‡∏ï‡∏±‡∏ß User ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Database ‡∏ï‡∏≤‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÑ‡∏ß‡πâ
authRouter.post("/register", async (req, res) => {
  // ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß body ‡∏ó‡∏µ‡πà client ‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
  const user = {
    username: req.body.username,
    password: req.body.password,
    firstName: req.body.firstName,
    lastName: req.body.lastName,
  };

  // ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ password ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏≤‡∏î‡πÄ‡∏î‡∏≤‡πÑ‡∏î‡πâ‡∏¢‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
  const salt = await bcrypt.genSalt(10);
  // ‡∏ô‡∏≥ password ‡∏°‡∏≤ reassign ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
  user.password = await bcrypt.hash(user.password, salt);

  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å collection ‡πÅ‡∏•‡πâ‡∏ß insert ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô collection ‡πÅ‡∏•‡πâ‡∏ß return ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏≠‡∏Å client ‡∏ß‡πà‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢
  const collection = db.collection("users");
  await collection.insertOne(user);

  return res.json({ message: "User has been created successfully" });
});
// üê® Todo: Exercise #3
// ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ Login ‡∏ï‡∏±‡∏ß User ‡∏ï‡∏≤‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÑ‡∏ß‡πâ
authRouter.post("/login", async (req, res) => {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö username ‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡πà‡∏≤ username ‡∏ó‡∏µ‡πà client ‡∏™‡πà‡∏á‡∏°‡∏≤ ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô DB ‡∏°‡∏±‡πâ‡∏¢
  const user = await db
    .collection("users")
    .findOne({ username: req.body.username });

  // logic ‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ user ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô DB ‡πÉ‡∏´‡πâ return ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ user ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ö‡∏≠‡∏Å client
  if (!user) {
    return res.status(404).json({ message: "user not found" });
  }

  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ user ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏à‡∏∞‡πÄ‡∏≠‡∏≤ password ‡∏ó‡∏µ‡πà client ‡∏™‡πà‡∏á‡∏°‡∏≤ ‡∏°‡∏≤‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡πÉ‡∏ô DB
  // bcrypt.compare ‡πÄ‡∏õ‡πá‡∏ô Function ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Password ‡πÅ‡∏ö‡∏ö‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ ‡∏Å‡∏±‡∏ö Password ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å Encrypt ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏î‡πâ
  // ‡∏ú‡∏•‡∏à‡∏∞ return true = ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô & false = ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
  const isValidPassword = await bcrypt.compare(
    req.body.password, // password ‡∏à‡∏≤‡∏Å client ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
    user.password // password ‡∏à‡∏≤‡∏Å DB
  );

  // ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á logic ‡πÉ‡∏´‡πâ return ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤ passwaord ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  if (!isValidPassword) {
    return res.status(404).json({ message: "password not valid" });
  }

  // ‡∏ñ‡πâ‡∏≤ user & password ‡∏ï‡∏£‡∏á ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á token
  const token = jwt.sign(
    {
      id: user._id,
      firstName: user.firstName,
      lastName: user.lastName,
    },
    process.env.SECRET_KEY,
    {
      expiresIn: "900000",
    }
  );

  return res.json({ message: "login successfully", token });
});

export default authRouter;
